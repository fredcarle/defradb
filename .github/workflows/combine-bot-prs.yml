# Copyright 2023 Democratized Data Foundation
#
# Use of this software is governed by the Business Source License
# included in the file licenses/BSL.txt.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0, included in the file
# licenses/APL.txt.

name: Combine Bot PRs Workflow

# Triggered manually with the following configuration options to combine dependabot PRs.

on:
  workflow_dispatch:
    inputs:

      branchPrefix:
        description: 'Branch prefix to find combinable PRs based on, eg: dependabot/npm_and_yarn/playground'
        required: true
        default: 'dependabot'

      mustBeGreen:
        description: 'Only combine PRs that are green (status is success). Keep false if repo does not run checks'
        type: boolean
        required: true
        default: false

      combineBranchName:
        description: 'Name of the branch to combine PRs into'
        required: true
        default: 'combined-bot-prs-branch'

      ignoreLabel:
        description: 'Exclude PRs with this label'
        required: true
        default: 'DO NOT MERGE'

jobs:
  combine-bot-prs:
    name: Combine bot prs job

    runs-on: ubuntu-latest

    steps:
      - name: Set current date as env variable
        run: echo "CURRENT_DATE=$(date +'%d-%m-%Y')" >> ${GITHUB_ENV}

      - name: Create combined pr
        id: create-combined-pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pulls = await github.paginate('GET /repos/:owner/:repo/pulls', {
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            let branchesAndPRStrings = [];
            let baseBranch = null;
            let baseBranchSHA = null;
            for (const pull of pulls) {
              const branch = pull['head']['ref'];
              console.log('Pull for branch: ' + branch);
              if (branch.startsWith('${{ github.event.inputs.branchPrefix }}')) {
                console.log('Branch matched prefix: ' + branch);
                let statusOK = true;
                if (${{ github.event.inputs.mustBeGreen }}) {
                  console.log('Checking green status: ' + branch);
                  const stateQuery = `query($owner: String!, $repo: String!, $pull_number: Int!) {
                    repository(owner: $owner, name: $repo) {
                      pullRequest(number:$pull_number) {
                        commits(last: 1) {
                          nodes {
                            commit {
                              statusCheckRollup {
                                state
                              }
                            }
                          }
                        }
                      }
                    }
                  }`
                  const vars = {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pull['number']
                  };
                  const result = await github.graphql(stateQuery, vars);
                  const [{ commit }] = result.repository.pullRequest.commits.nodes;
                  const state = commit.statusCheckRollup.state
                  console.log('Validating status: ' + state);
                  if (state != 'SUCCESS') {
                    console.log('Discarding ' + branch + ' with status ' + state);
                    statusOK = false;
                  }
                }
                console.log('Checking labels: ' + branch);
                const labels = pull['labels'];
                for (const label of labels) {
                  const labelName = label['name'];
                  console.log('Checking label: ' + labelName);
                  if (labelName == '${{ github.event.inputs.ignoreLabel }}') {
                    console.log('Discarding ' + branch + ' with label ' + labelName);
                    statusOK = false;
                  }
                }
                if (statusOK) {
                  console.log('Adding branch to array: ' + branch);
                  const prString = '#' + pull['number'] + ' ' + pull['title'];
                  branchesAndPRStrings.push({
                    branch,
                    prString
                  });
                  baseBranch = pull['base']['ref'];
                  baseBranchSHA = pull['base']['sha'];
                }
              }
            }
            if (branchesAndPRStrings.length == 0) {
              core.setFailed('No PRs/branches matched criteria');
              return;
            }
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/heads/' + '${{ github.event.inputs.combineBranchName }}',
                sha: baseBranchSHA
              });
            } catch (error) {
              console.log(error);
              core.setFailed('Failed to create combined branch - maybe a branch by that name already exists?');
              return;
            }

            let combinedPRs = [];
            let mergeFailedPRs = [];
            for (const { branch, prString } of branchesAndPRStrings) {
              try {
                await github.rest.repos.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  base: '${{ github.event.inputs.combineBranchName }}',
                  head: branch,
                });
                console.log('Merged branch ' + branch);
                combinedPRs.push(prString);
              } catch (error) {
                console.log('Failed to merge branch ' + branch);
                mergeFailedPRs.push(prString);
              }
            }

            console.log('Creating combined PR');
            const combinedPRsString = combinedPRs.join('\n');
            let body = '✅ This PR was created by combining the following PRs:\n' + combinedPRsString;
            if (mergeFailedPRs.length > 0) {
              const mergeFailedPRsString = mergeFailedPRs.join('\n');
              body += '\n\n⚠️ The following PRs were left out due to merge conflicts:\n' + mergeFailedPRsString
            }
            await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'bot: Update dependencies (bulk dependabot PRs) ${CURRENT_DATE}',
              head: '${{ github.event.inputs.combineBranchName }}',
              base: baseBranch,
              body: body
            });
